swagger: "2.0"
info:
  description: "This is the documentation of the WEB API for the project \"Viva la Dama\""
  version: "1.0.0"
  title: "Viva la Dama"
host: "localhost"
basePath: "/"
tags:
- name: "game"
  description: "These are all the methods in order to create, update, retrieve and delete a gaming session"
schemes:
- "http"
paths:
  /game:
    post:
      tags:
      - "game"
      summary: "Create a new gaming session"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "nameOfPlayers"
        description: "This object contains the names of the two players"
        required: true
        schema:
          $ref: "#/definitions/NameOfPlayers"
      responses:
        "201":
          description: "The game is created successfully"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "The input is not valid: missing paramaters!"
    get:
      tags:
      - "game"
      summary: "Get all the gaming sessions"
      description: ""
      produces:
      - "application/json"
      responses:
        "200":
          description: "The operation is executed successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GamePreview"
  /game/{id}:
    get:
      tags:
      - "game"
      summary: "Get a specific gaming session"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of a gaming session"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The operation is executed successfully"
          schema:
            $ref: "#/definitions/Game"
        "404":
          description: "The id specified in the url doesn't match with any gaming session"
    put:
      tags:
      - "game"
      summary: "A player has made a move and want to execute it"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the gaming session that needs to be modified"
        required: true
        type: "integer"
        format: "int64"
      - name: "move"
        in: "body"
        description: "The move that a player want to execute"
        required: true
        schema:
          $ref: "#/definitions/MoveToSend"
      responses:
        "200":
          description: "The operation is executed successfully"
          schema:
            $ref: "#/definitions/Game"
        "400":
          description: "If the id specified in the url is different from the one in the object"
        "403":
          description: "If the move is not valid and can't be executed"
    delete:
      tags:
      - "game"
      summary: "Destroy a gaming session"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the gaming session that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The operation is executed successfully"
          schema:
            $ref: "#/definitions/Game"
        "404":
          description: "Specified game does not exist"
        "400":
          description: "Game has no moves"
  /game/{id}/lastMove:
    delete:
      tags:
      - "game"
      summary: "Revert last move of specified game"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the gaming session that needs to be reverted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "The operation is executed successfully"
          schema:
            $ref: "#/definitions/Game"
  
definitions:
  NameOfPlayers:
    type: "object"
    properties:
      namePlayer1:
        type: "string"
      namePlayer2:
        type: "string"
  PawnToRecv:
    type: "object"
    properties:
      pawnId:
        type: "integer"
        format: "int64"
      color:
        type: "integer"
        enum: [0, 1]
      upgraded:
        type: "boolean"
  PawnToSend:
    type: "object"
    properties:
      pawnId:
        type: "integer"
        format: "int64"
      color:
        type: "integer"
        enum: [0, 1]
  PawnPositioned:
    type: "object"
    properties:
      position:
        $ref: "#/definitions/Coordinate"
      pawnId:
        type: "integer"
        format: "int64"
      color:
        type: "integer"
        enum: [0, 1]
      upgraded:
        type: "boolean"
  MoveToSend:
    type: "object"
    properties:
      target:
        $ref: "#/definitions/PawnToSend"
      to:
        $ref: "#/definitions/Coordinate"
  MoveToRecv:
    type: "object"
    properties:
      moveId:
        type: "integer"
        format: "int64"
      target:
        $ref: "#/definitions/PawnToRecv"
      from:
        $ref: "#/definitions/Coordinate"
      to:
        $ref: "#/definitions/Coordinate"
  GamePreview:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      namePlayer1:
        type: "string"
        example: "nomePlayer1"
      namePlayer2:
        type: "string"
        example: "nomePlayer2"
  Game:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      namePlayer1:
        type: "string"
        example: "nomePlayer1"
      namePlayer2:
        type: "string"
        example: "nomePlayer2"
      turn:
        enum: [0, 1]
        type: "integer"
        format: "int64"
      pointsWhite:
        type: "integer"
        format: "int64"
      pointsBlack:
        type: "integer"
        format: "int64"
      gameStatus:
        enum: [0, 1, 2, 3]
        type: "integer"
        format: "int64"
      moves:
        type: "array"
        items:
          $ref: "#/definitions/MoveToRecv"
      black:
        type: "array"
        items:
          $ref: "#/definitions/PawnPositioned"
        example:
          [{
            position: {
              row: 0,
              column: 0
            },
            pawnId: 0,
            color: 1,
            upgraded: false
          }]
      white:
        type: "array"
        items:
          $ref: "#/definitions/PawnPositioned"
        example:
          [{
            position: {
              row: 0,
              column: 0
            },
            pawnId: 0,
            color: 0,
            upgraded: false
          }]
  Coordinate:
    type: "object"
    properties:
      row:
        type: "integer"
        format: "int64"
      column:
        type: "integer"
        format: "int64"
